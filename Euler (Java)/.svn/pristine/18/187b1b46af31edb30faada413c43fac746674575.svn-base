package problems.P026xP050;

import util.Basic;
import base.Problem;

/**
 * P045<br>
 *Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 *
 *Triangle    Tn=n(n+1)/2    1, 3, 6, 10, 15, ...
 *Pentagonal     Pn=n(3n−1)/2      1, 5, 12, 22, 35, ...
 *Hexagonal      Hn=n(2n−1)     1, 6, 15, 28, 45, ...
 *
 *It can be verified that T285 = P165 = H143 = 40755.
 *
 *Find the next triangle number that is also pentagonal and hexagonal.
 * Ans: 1533776805
 * @return
 */
public class P045 extends Problem
{
   public P045()
   {
      problemNumber = 45;
      variations = 2;
   }

   @Override
   protected String execute(int variation)
   {
      switch (variation)
      {
         case 0:
            return attempt() + "";
         case 1:
         case -1:
            return attempt2() + "";
      }
      return null;
   }
   
   /**
    * Just check all future triangle numbers!
    * @return
    */
   private long attempt()
   {
   	int idx = 286;
   	while (true)
   	{
   	   long t = Basic.getTriangleNumber(idx++);
   	   if (Basic.isPentagonalNumber(t) && Basic.isHexagonalNumber(t))
   	      return t;
   	}
   }
   
   /**
    * Hexagonals are
    * 2n^2 - n
    * Triangles are
    * (n^2+n)/2
    * Pentagonals are
    * (3n^2-n)/2
    * 
    * But all hexagonals are also triangle numbers, so we can ignore triangle numbers and just
    * need all hexagonals that are also pentagonals
    * 2h^2 - h = (3p^2 - p)/2
    * 4h^2 - 2h = 3p^2 - p
    * @return
    */
   private long attempt2()
   {
      // also, just iterate on the smallest index (hexagonals), saving some time
      int idx = 144;
      while (true)
      {
         if (Basic.isPentagonalNumber(Basic.getHexagonalNumber(idx++)))
            return Basic.getHexagonalNumber(idx-1);
      }
   }
   
}
